// Run as `node ./raml2graphql [-v] inputs/inventory.raml`

const argv0 = process.argv[1].replace(/.*\//, '');
let verbose = false;
if (process.argv[2] == '-v') {
  verbose = true;
  process.argv.shift();
}
const file = process.argv[2];
if (!file) {
  console.error(`Usage: ${argv0}: SOMEFILE.raml`);
  process.exit(1);
}

const raml = require('raml-1-parser');
let api;
try {
  api = raml.parseSync(file);
} catch(e) {
  console.error(`${argv0}: RAML parse failed:`, e);
  process.exit(2);
}

if (verbose) {
  console.log(`api is a ${api.constructor.name}`); // ASTNodeImpl
  console.log(JSON.stringify(api.toJSON(), null, 2));
}

emitComment(api, 'title')
emitComment(api, 'version')
emitComment(api, 'protocols')
emitComment(api, 'baseUri')

api.elementsOfKind('resources').forEach((resource, i) => {
  processResource(resource);
});


function emitComment(api, tag) {
  const rendered = [];

  api.attributes(tag).forEach((attr) => {
    const value = attr.plainValue();
    rendered.push(`${value} (${typeof value})`);
  });

  console.log(`# ${tag}: ${rendered.join(', ')}`);
}


function processResource(resource, level = 0, parentUri = '') {
  const uri = parentUri + resource.attr('relativeUri').plainValue();
  const dna = resource.attr('displayName');
  console.log(`${'  '.repeat(level)}${uri}${dna ? ` # ${dna.plainValue()}` : ''}`);

  resource.elementsOfKind('resources').forEach((sub, i) => {
    processResource(sub, level+1, uri);
  });
}
