#!/usr/bin/env node

/* eslint-disable no-console, no-use-before-define */
// Run as: ./raml2graphql ../../../mod-inventory-storage/ramls/instance-storage.raml
//     or: ./raml2graphql ../../../mod-kb-ebsco/ramls/provider.raml
//     or: LOGCAT=ramlList,skip,nomatch ./raml2graphql -d ../../.. -s -m '^mod-(users|inventory)$' -a ../../api.yml
// For the time being, you will need mod-inventory-storage to be on
// the "graphql" branch and mod-kb-ebsco to be on the
// "json-schema-for-mod-kb-providers-endpoint" branch

const packageInfo = require('../../package.json');
const Logger = require('../configuredLogger');
const { listAPIs } = require('./listAPIs');
const { convertAPIs } = require('./convertAPI');

const argv0 = process.argv[1].replace(/.*\//, '');
const opt = require('node-getopt').create([
  ['a', 'api', 'Parse YAML description of APIs and translate them all'],
  ['d', 'dir=DIRECTORY', 'Under -a, fetch RAMLs from modules in specified directory'],
  ['s', 'skip', 'Under -a, skip modules that are not present in the filesystem'],
  ['m', 'match=REGEXP', 'Under -a, include RAMLs only from modules that match REGEXP'],
  ['t', 'trace', 'Include stack-trace in error reports'],
  ['V', 'version', 'Show version and exit'],
  ['h', 'help', 'Display this help'],
])
  .setHelp(`Usage: node ${argv0} [OPTIONS] <RAMLfile> ...\n[[OPTIONS]]`)
  .bindHelp()
  .parseSystem();

if (opt.options.version) {
  console.log(`${argv0} version ${packageInfo.version}`);
  process.exit(0);
}

if (opt.argv.length === 0 || (opt.options.api && opt.argv.length > 1)) {
  console.info(opt.getHelp());
  process.exit(1);
}

try {
  const ramlFiles = (
    opt.options.api ?
      listAPIs(opt.argv[0], opt.options.dir, opt.options.skip, opt.options.match) :
      opt.argv
  );
  const { schema } = convertAPIs(ramlFiles, null, Object.assign({}, opt.options, { logger: new Logger() }));
  console.log(schema);
} catch (e) {
  console.error(opt.options.trace ? e : e.message);
  process.exit(2);
}
