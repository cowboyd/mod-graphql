#!/usr/bin/env node

/* eslint-disable no-console, no-use-before-define */
// Run as: ./raml2graphql ../../../mod-inventory-storage/ramls/instance-storage.raml
//     or: ./raml2graphql ../../../mod-kb-ebsco/ramls/provider.raml
//     or: ./raml2graphql ../../../mod-configuration/ramls/configuration/config.raml
// For the time being, you will need mod-inventory-storage to be on
// the "graphql" branch and mod-kb-ebsco to be on the
// "json-schema-for-mod-kb-providers-endpoint" branch

const fs = require('fs');
const yaml = require('js-yaml');
const packageInfo = require('../../package.json');
const Logger = require('../configuredLogger');
const { convertAPIs } = require('./convertAPI');

const argv0 = process.argv[1].replace(/.*\//, '');
const opt = require('node-getopt').create([
  ['a', 'api', 'Parse YAML description of APIs and translate them all'],
  ['t', 'trace', 'Include stack-trace in error reports'],
  ['V', 'version', 'Show version and exit'],
  ['h', 'help', 'Display this help'],
])
  .setHelp(`Usage: node ${argv0} [OPTIONS] <RAMLfile> ...\n[[OPTIONS]]`)
  .bindHelp()
  .parseSystem();

if (opt.options.version) {
  console.log(`${argv0} version ${packageInfo.version}`);
  process.exit(0);
}

if (opt.argv.length === 0 || (opt.options.api && opt.argv.length > 1)) {
  console.info(opt.getHelp());
  process.exit(1);
}

try {
  if (opt.options.api) {
    translateFromAPIs(opt.argv[0], new Logger());
  } else {
    translateSpecifiedFiles(opt.argv, new Logger());
  }
} catch (e) {
  console.error(opt.options.trace ? e : e.message);
  process.exit(2);
}


function translateFromAPIs(apiFile, logger) {
  const ramlFiles = [];
  let dfault;

  // Should be parameterisable
  const pathPrefix = '../../..';

  const modules = yaml.safeLoad(fs.readFileSync(apiFile, 'utf8'));

  // For some reason, these come back to us in the order specified in the file
  const moduleNames = Object.keys(modules);
  moduleNames.forEach(name => {
    if (name === 'default') {
      // Should be first;
      if (dfault) throw new Error('multiple "default" entries in API YAML');
      dfault = modules[name];
    } else {
      if (!dfault) throw new Error('no initial "default" entry in API YAML');
      const module = modules[name];
      module.forEach((section, i) => {
        if (!section.files) {
          console.warn(`no files for module '${name}' section ${i+1}:`, section);
        } else {
          section.files.forEach(ramlName => {
            ramlFiles.push(`${pathPrefix}/${name}/${section.directory}/${ramlName}.raml`);
          });
        }
      });
    }
  });

  console.log(`${ramlFiles.length} RAML files:`, JSON.stringify(ramlFiles, null, 2));

  return translateSpecifiedFiles(ramlFiles, logger);
}


function translateSpecifiedFiles(ramlFiles, logger) {
  const { schema } = convertAPIs(ramlFiles, null, Object.assign({}, opt.options, { logger }));
  console.log(schema);
}
