/ Run as `node ./raml2graphql [-v] inputs/inventory.raml`

const package = require('./package.json');

const argv0 = process.argv[1].replace(/.*\//, '');
const opt = require('node-getopt').create([
  ['v' , 'verbose' , 'Verbose mode: dump JSON of RAML/Schema'],
  ['V' , 'version' , 'Show version and exit'],
  ['h' , 'help'    , 'Display this help'],
])
.setHelp(`Usage: node ${argv0} [OPTIONS] <RAMLfile>\n[[OPTIONS]]`)
.bindHelp()
.parseSystem();

const options = opt.options;
const verbose = options.verbose;

if (options.version) {
  console.log(`${argv0} version ${package.version}`);
  process.exit(0);
}

const file = opt.argv[0];
if (!file) {
  console.error(`Usage: ${argv0}: SOMEFILE.raml`);
  process.exit(1);
}

const raml = require('raml-1-parser');
let api;
try {
  api = raml.parseSync(file);
} catch(e) {
  console.error(`${argv0}: RAML parse failed:`, e);
  process.exit(2);
}

if (verbose) {
  console.log(`api is a ${api.constructor.name}`); // ASTNodeImpl
  console.log(JSON.stringify(api.toJSON(), null, 2));
}

['title', 'version', 'protocols', 'baseUri'].forEach(tag => {
  const rendered = [];
  api.attributes(tag).forEach((attr) => {
    rendered.push(attr.plainValue());
  });
  console.log(`# ${tag}: ${rendered.join(', ')}`);
});

api.elementsOfKind('resources').forEach((resource, i) => {
  processResource(resource);
});


function processResource(resource, level = 0, parentUri = '') {
  const uri = parentUri + resource.attr('relativeUri').plainValue();
  const dna = resource.attr('displayName');
  console.log(`${'  '.repeat(level)}${uri}${dna ? ` # ${dna.plainValue()}` : ''}`);

  resource.elementsOfKind('resources').forEach((sub, i) => {
    processResource(sub, level+1, uri);
  });
}
