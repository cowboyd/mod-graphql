#!/usr/bin/env node

/* eslint-disable no-console, no-use-before-define */
// Run as: ./raml2graphql ../../../mod-inventory-storage/ramls/instance-storage.raml
//     or: ./raml2graphql ../../../mod-kb-ebsco/ramls/provider.raml
//     or: ./raml2graphql ../../../mod-configuration/ramls/configuration/config.raml
// For the time being, you will need mod-inventory-storage to be on
// the "graphql" branch and mod-kb-ebsco to be on the
// "json-schema-for-mod-kb-providers-endpoint" branch

const fs = require('fs');
const yaml = require('js-yaml');
const packageInfo = require('../../package.json');
const Logger = require('../configuredLogger');
const { convertAPIs } = require('./convertAPI');

const argv0 = process.argv[1].replace(/.*\//, '');
const opt = require('node-getopt').create([
  ['a', 'api', 'Parse YAML description of APIs and translate them all'],
  ['V', 'version', 'Show version and exit'],
  ['h', 'help', 'Display this help'],
])
  .setHelp(`Usage: node ${argv0} [OPTIONS] <RAMLfile> ...\n[[OPTIONS]]`)
  .bindHelp()
  .parseSystem();

if (opt.options.version) {
  console.log(`${argv0} version ${packageInfo.version}`);
  process.exit(0);
}

if (opt.argv.length === 0 || (opt.options.api && opt.argv.length > 1)) {
  console.info(opt.getHelp());
  process.exit(1);
}

if (opt.options.api) {
  translateFromAPIs(opt.argv[0], new Logger());
} else {
  translateSpecifiedFiles(opt.argv, new Logger());
}


function translateFromAPIs(apiFile, _logger) {
  try {
    const doc = yaml.safeLoad(fs.readFileSync(apiFile, 'utf8'));
    console.log(JSON.stringify(doc, null, 2));
  } catch (e) {
    console.error(e);
  }
}


function translateSpecifiedFiles(ramlFiles, logger) {
  try {
    const { schema } = convertAPIs(ramlFiles, null, Object.assign({}, opt.options, { logger }));
    console.log(schema);
  } catch (e) {
    console.error(e.message);
    process.exit(2);
  }
}
